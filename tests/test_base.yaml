- case: test_maintains_decorated_type_hints
  main: |
    from injected import resolver, depends
    from typing import assert_type, Callable

    @resolver
    def a(
      foo: str = depends(str),
      bar: int = depends(int),
    ) -> tuple[str, int]:
      return foo, bar

    reveal_type(a)  # N: Revealed type is "def (foo: builtins.str =, bar: builtins.int =) -> tuple[builtins.str, builtins.int]"
    reveal_type(a())  # N: Revealed type is "tuple[builtins.str, builtins.int]"
    a(foo=1)  # E: Argument "foo" to "a" has incompatible type "int"; expected "str"  [arg-type]
    a(bar="foo")  # E: Argument "bar" to "a" has incompatible type "str"; expected "int"  [arg-type]

- case: test_seeded_resolver_maintains_type_hints
  main: |
    from injected import resolver, depends, seed_context
    from typing import assert_type, Callable

    class Request: ...
    def get_request() -> Request: ...  # type: ignore[empty-body]

    @resolver
    def a(
      request: Request = depends(get_request),
      foo: str = depends(str),
      bar: int = depends(int),
    ) -> tuple[str, int, Request]:
      return foo, bar, request

    context = {get_request: Request()}
    seeded = seed_context(a, context)

    reveal_type(seeded)  # N: Revealed type is "def (request: main.Request =, foo: builtins.str =, bar: builtins.int =) -> tuple[builtins.str, builtins.int, main.Request]"
    reveal_type(seeded())  # N: Revealed type is "tuple[builtins.str, builtins.int, main.Request]"
    seeded(foo=1)  # E: Argument "foo" has incompatible type "int"; expected "str"  [arg-type]
    seeded(bar="foo")  # E: Argument "bar" has incompatible type "str"; expected "int"  [arg-type]

- case: test_maintains_type_hints_of_decorated_async_function
  main: |
    from injected import resolver, depends
    from typing import assert_type, Callable

    @resolver
    async def a(
      foo: str = depends(str),
      bar: int = depends(int),
    ) -> str:
      return f"{foo=}, {bar=}"

    async def main() -> None:
      reveal_type(a)  # N: Revealed type is "def (foo: builtins.str =, bar: builtins.int =) -> typing.Coroutine[Any, Any, builtins.str]"
      reveal_type(await a())  # N: Revealed type is "builtins.str"
      await a(foo=1)  # E: Argument "foo" to "a" has incompatible type "int"; expected "str"  [arg-type]
      await a(bar="foo")  # E: Argument "bar" to "a" has incompatible type "str"; expected "int"  [arg-type]

- case: test_raises_error_for_async_provider_return_value_mismatch
  main: |
    from injected import resolver, depends

    async def provides() -> int:
      return 1

    @resolver
    async def a(
      value: str = depends(provides),  # E: Incompatible default for argument "value" (default has type "int", argument has type "str")  [assignment]
    ) -> str:
      return value

- case: test_raises_error_for_provider_return_value_mismatch
  main: |
    from injected import resolver, depends

    def provides() -> int:
      return 1

    @resolver
    def a(
      value: str = depends(provides),  # E: Incompatible default for argument "value" (default has type "int", argument has type "str")  [assignment]
    ) -> str:
      return value

- case: test_raises_error_for_wrong_provider_argument_kind
  main: |
    from injected import resolver, depends

    def provides(a: int = 1, /, b: str = "foo", *, c: tuple = ()) -> int:
      return a

    @resolver
    def a(
      value: int = depends(provides, 1, "foo", c=()),
    ) -> int:
      return value

    @resolver
    def b(
      value: int = depends(provides, 1, b="foo", c=()),
    ) -> int:
      return value

    @resolver
    def c(
      value: int = depends(provides, a=1),
    ) -> int:
      return value

    @resolver
    def d(
      value: int = depends(provides, 1, "foo", ()),
    ) -> int:
      return value
  out: |
    main:20: error: No overload variant of "depends" matches argument types "Callable[[int, str, DefaultNamedArg(tuple[Any, ...], 'c')], int]", "int"  [call-overload]
    main:20: note: Possible overload variants:
    main:20: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:20: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:20: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T
    main:26: error: No overload variant of "depends" matches argument types "Callable[[int, str, DefaultNamedArg(tuple[Any, ...], 'c')], int]", "int", "str", "tuple[()]"  [call-overload]
    main:26: note: Possible overload variants:
    main:26: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:26: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:26: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T

- case: test_raises_error_for_incorrect_provider_argument_type
  main: |
    from injected import resolver, depends

    def provides(v: int) -> int:
      return v

    @resolver
    def a(
      value: int = depends(provides, v="foo"),
    ) -> int:
      return value

    @resolver
    def b(
      value: int = depends(provides, "foo"),
    ) -> int:
      return value
  out: |
    main:8: error: No overload variant of "depends" matches argument types "Callable[[int], int]", "str"  [call-overload]
    main:8: note: Possible overload variants:
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: error: No overload variant of "depends" matches argument types "Callable[[int], int]", "str"  [call-overload]
    main:14: note: Possible overload variants:
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T

- case: test_raises_error_for_missing_required_provider_argument
  main: |
    from injected import resolver, depends

    def provides(v: int) -> int:
      return v

    @resolver
    def a(
      value: int = depends(provides),
    ) -> int:
      return value
  out: |
    main:8: error: No overload variant of "depends" matches argument type "Callable[[int], int]"  [call-overload]
    main:8: note: Possible overload variants:
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T

- case: test_raises_error_for_unexpected_provider_argument
  main: |
    from injected import resolver, depends

    def provides() -> int:
      return 7

    @resolver
    def a(
      value: int = depends(provides, arg=1),
    ) -> int:
      return value

    @resolver
    def b(
      value: int = depends(provides, "foo")
    ) -> int:
      return value
  out: |
    main:8: error: No overload variant of "depends" matches argument types "Callable[[], int]", "int"  [call-overload]
    main:8: note: Possible overload variants:
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:8: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: error: No overload variant of "depends" matches argument types "Callable[[], int]", "str"  [call-overload]
    main:14: note: Possible overload variants:
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, Awaitable[T]], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, AbstractContextManager[T, bool | None]], *args: P.args, **kwargs: P.kwargs) -> T
    main:14: note:     def [P`-1, T] depends(provider: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T
